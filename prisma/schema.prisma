// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // INFO: map this ID to object ID with specific type MongoDB
  // INFO: add question mark mean "optional"
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
}

// INFO: for social login account so we have to list all the property correctly for social login
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_At        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // INFO: create a relation with User using the field userId, references to the User model (the id fields), store Id in the userId, onDelete, if a user is delete it will automatically delete in Account
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int

  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?       @db.ObjectId
  reservation Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String   @db.ObjectId
}
